%% PreProcessing
% Load Selected Image
im = imread('OriginalColorImage_Q2.jpg');

% Image Proccessing with Color Thresholding for Visualization
% Exploratory step to investigate the RGB values for each region
% Establishes a basline for what to expect from GMM Clustering

load("rgy_Q2.mat");
% rgy.mat generated by using the imcrop tool to isolate samples from
% different regions of the image. 

ymin = min(min(y));
ymax = max(max(y));
gmin = min(min(g));
gmax = max(max(g));
rmin = min(min(r));
rmax = max(max(r));

cthresh = zeros(size(im));
numrows = size(im,1);
numcols = size(im,2);
for row_ind = 1:numrows
    for col_ind = 1:numcols
        indpix = im(row_ind,col_ind,:);

        if (ymin(1)<indpix(1)&&indpix(1)<ymax(1)) && (ymin(2)<indpix(2)&&indpix(2)<ymax(2)) && (ymin(3)<indpix(3)&&indpix(3)<ymax(3))
           cthresh(row_ind,col_ind,:) = [80 80 80];
        elseif (gmin(1)<indpix(1)&&indpix(1)<gmax(1)) && (gmin(2)<indpix(2)&&indpix(2)<gmax(2)) && (gmin(3)<indpix(3)&&indpix(3)<gmax(3))
           cthresh(row_ind,col_ind,:) = [110 110 110];
        elseif (rmin(1)<indpix(1)&&indpix(1)<rmax(1)) && (rmin(2)<indpix(2)&&indpix(2)<rmax(2)) && (rmin(3)<indpix(3)&&indpix(3)<rmax(3))
            cthresh(row_ind,col_ind,:) = [0 0 0];
        elseif (indpix(1)<30 && indpix(2)<30 && indpix(3)<30)
            cthresh(row_ind,col_ind,:) = [110 110 110];
        else
            cthresh(row_ind,col_ind,:) = [255 255 255];
        end
    end
end

figure
imshow(uint8(cthresh))
title('Output of Color Channel Thresholding')

% Generate PreProcessing Matrix
pp_im = zeros(numrows*numcols,5);
pp_ind = 0;
for row_ind = 1:numrows
    for col_ind = 1:numcols
        pp_ind = pp_ind+1;
        pp_im(pp_ind,1) = row_ind; % Row index
        pp_im(pp_ind,2) = col_ind; % Column index
        pp_im(pp_ind,3) = im(row_ind,col_ind,1); % R value
        pp_im(pp_ind,4) = im(row_ind,col_ind,2); % G value
        pp_im(pp_ind,5) = im(row_ind,col_ind,3); % B value
    end
end

% Normalize Matrix, Range [0 1]
norm_im = zeros(size(pp_im));
for col_ind = 1:5
    normpp = pp_im(:,col_ind) - min(pp_im(:,col_ind));
    norm_im(:,col_ind) = normpp ./ max(normpp(:));
end

% Trim for second case to neglect pixel indices
norm_im_trimmed = norm_im(:,3:end);

% Save Data to Use in R
%writematrix(norm_im,"FinalProjData_Q2.xlsx")
%writematrix(norm_im_trimmed,"FinalProjData_Q2_RGBOnly.xlsx")
%% GMM Clustering
% DONE IN R

%% PostProcessing (Using Output from R)
% Import cluster data from R output
clust = readmatrix("PixelGroupings_Q2.xlsx");
%clust = readmatrix("PixelGroupings_Q2_RGBOnly.xlsx");

% Reformat clust array into image
clust_im = zeros(size(im,1),size(im,2));
for clust_ind = 1:length(clust)
    row = pp_im(clust_ind,1);
    col = pp_im(clust_ind,2);
    clust_im(row,col) = clust(clust_ind);
end

% Establish grayscale grouping image, uncomment clust_im==4 for k=4
color_clust = zeros(size(im));

tst_im = zeros(size(clust_im));
tst_im(clust_im==1) = 0; % Default but included for clarity
tst_im(clust_im==2) = 80;
tst_im(clust_im==3) = 150;
%tst_im(clust_im==4) = 255;

color_clust(:,:,1) = tst_im;
color_clust(:,:,2) = tst_im;
color_clust(:,:,3) = tst_im;

% Display original image and grouped image
figure
imshow(im)
title('Original Image')
figure
imshow(uint8(color_clust))
title('Clustered Image')

